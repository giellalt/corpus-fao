<document xml:lang="fao" id="no_id"><header><title/><genre code="science"/><author><unknown/></author><wordcount>8166</wordcount><conversion_status type="standard"/><availability><license type="standard"/></availability><multilingual><language xml:lang="dan"/><language xml:lang="eng"/></multilingual><origFileName>nvdrit_2009_07.pdf</origFileName><metadata><uncomplete/></metadata><version>XSLtemplate $Revision: 187360 $; file-specific xsl  Revision; common.xsl  $Revision$; </version></header><body><p><em type="bold">Digitalur og analogur elektronikkur </em></p>
<p><em type="bold">Starvsstovuvenjingar </em></p>
<p xml:lang="dan">Magnus Danielsen</p>
<p>Benadikt Joensen Ólavur Simonsen</p>
<p xml:lang="eng">NVD <em type="italic">Rit </em>2009:07 </p>
<p xml:lang="eng">Heiti / Title</p>
<p><em type="bold">Digitalur og analogur elektronikkur – </em>Starvsstovuvenjingar </p>
<p>Høvundar / Authors</p>
<p>Magnus Danielsen Benadikt Joensen Ólavur Simonsen</p>
<p xml:lang="eng">Ritslag / Report Type</p>
<p xml:lang="dan"><em type="italic">Forsíða/Frontpage </em></p>
<p xml:lang="eng"><em type="italic">Undirvísingartilfar/Teaching Material </em></p>
<p xml:lang="eng">DE2-70 development board, Altera and Terassic Proton Development Board, Crownhill Ltd.</p>
<p xml:lang="eng">NVD <em type="italic">Rit </em>2009:07 © </p>
<p>Náttúruvísindadeildin og høvundurin</p>
<p xml:lang="eng">ISSN1601-9741</p>
<p>Útgevari / Publisher</p>
<p>Náttúruvísindadeildin, Fróðskaparsetur Føroya</p>
<p>Bústaður / Address</p>
<p>Nóatún 3, FO 100 Tórshavn, Føroyar (Faroe Islands)</p>
<p>Postrúm / P.O. box2109, FO 165 Argir, Føroyar (Faroe Islands) y y @+298 352550 y +298 352551 y nvd@setur.fo</p>
<p xml:lang="eng"><em type="bold">INNIHALDSYVIRLIT </em></p>
<p><em type="bold">I. Digital rás til stýring av trafikkljósi </em><em type="bold">s. 5 </em></p>
<p xml:lang="dan"><em type="bold">II. Switch-mode regulering til DC motor </em><em type="bold">s. 13 </em></p>
<p xml:lang="eng"><em type="bold">III. Kombinatoriskar rásir </em><em type="bold">s. 17 </em></p>
<p xml:lang="dan"><em type="bold">IV. CMI – Koding og dekoding til ljósleiðara datasendiskipan s. 23 </em></p>
<p xml:lang="eng"><em type="bold">V. PIC mikrokontrollari – </em><em type="bold">menning við Proton Development Board </em><em type="bold">s. 31 </em></p>
<p><em type="bold">Føroyskt abstrakt </em>Henda frágreiðing umfatar leiðbeiningar til starvsstovuvenjingar í lærugreinunum <span type="quote">”Elektronikkur”</span> og <span type="quote">”Digitalur elektronikkur og mikroteldur”</span>, ið innganga í útbúgvingina BSc í KT Verkfrøði á Náttúruvísindadeildini á Fróðskaparsetri Føroya. </p>
<p xml:lang="eng"><em type="bold">English abstract: </em>The present report includes instructions for laboratory exercises for courses in <span type="quote" xml:lang="eng">”Electronics”</span> and <span type="quote" xml:lang="eng">”Digital electronics and microprocessors”</span> intended to be part of the education in ICT Engineering at University of The Faroe Islands. </p>
<p><em type="bold">I. Digital rás til stýring av trafikkljósi </em></p>
<p xml:lang="dan">Magnus Danielsen</p>
<p><em type="bold">Inngangur </em></p>
<p>Vanligt er at nýta ljóssignal til stýring av trafikkinum á vegamótum. Vit kanna í hesi venjingini bert eitt einfalt dømi, har ljóssignal er sett upp at stýra biltrafikki í einum vegamóti, sum víst í mynd 1. Raðfylgjan kann vera við trimum ymiskum støðum: 1) grønt ljós fyri <span type="quote">“koyr”</span>, 2)gult ljós fyri <span type="quote">“fyrireika teg at steðga”</span>, 3)reytt ljós fyri <span type="quote">“steðga”</span>, og síðan endurtikið 1)grønt ljós <span type="quote">“koyr”</span> o.s.v. Í summum skipanum er kortini raðfylgjan tillagað soleiðis, at raðfylgjan er í fýra ymiskum støðum: 1) grønt ljós fyri <span type="quote">“koyr”</span>, 2) gult ljós fyri <span type="quote">“fyrireika teg at steðga”</span>, 3) reytt ljós fyri <span type="quote">“steðga”</span>, 4) reytt og gult ljós fyri <span type="quote">“fyrireika teg at koyra”</span>, og so endurtikið 1)grønt ljós <span type="quote">“koyr”</span> o.s.v. Vanligt er, at fyri gongufólk verður bert nýtt skift millum reytt og grønt ljós, men verður ikki viðgjørt nærmari her.</p>
<p>Í venjingini verður ein stýriskipan roynd. Fyri at stýra raðfylgjuni av ljósunum verður digital streymrás uppbygd. Fleiri mátar eru at náa sama máli. Í hesi venjingini er valt at uppbyggja eina tíðarraðfylgjurás (timer IC) til klokkusignalgerða. Ein teljari verður nýttur til at avgera raðfylgjuna í ljósregulering-ini. Dekodarar verður nýttur til at peika á tey einstøku tíðarbilini í signalraðfylgjuni. Umframt eru kombinatoriskar rásir og flippfloppar nýttur í venjingini. Sum ljóssignalgerðar verða nýttar reyðar, gular og grønar ljósdiodur. Fyri at spara um talið á IC rásum, verða dekodarar og møguliga aðrar rásir við <span type="quote" xml:lang="eng">“open collector”</span> útgangi nýttir. Hendan venjingin tekur støði í <em type="italic">skjali 1 </em>, funnið á internetinumm. (Viðmerkjast skal, at í hesum skjali er feilur í diodurásini í mynd á síðu 6 og 7. Tí verður rásin broytt nakað í hesi venjingini.) Vert er at hefta seg við, at fleiri møguleikar eru fyri at uppbyggja rás, ið hevur sama úrslit. Í hesi venjingini er dentur lagdur á, at studentarnir læra um nakrar IC (Integrated Circuit) streymrásir, ið eru á marknaðinum, til at byggja funktiónina upp sum eina hardware </p>
<p>Mynd 1 Vegamót við reytt/gult/grønt skiftandi signalum fyri X í norður - suður rætning og Z í eystur – vestur rætning. loysn. Verður harafturímóti ein mikroprosessari brúktur, kann sama funktión verða skapt sum ein blanda software/hardware loysn. Uppsetingarnar í hesi venjingini skulu roynast bæði <em type="italic">1) við telduforritinum PSpice </em>og <em type="italic">2) í eini uppseting av elektronisku lutunum í starvsstovuni. </em>Stutt leiðbeining til PSpice er í kapittilið 10 í <em type="italic">skjali 2 </em>. Tað er týdningarmikið at fyrireika seg væl og, at <em type="bold">allir teir teoretisku spurningarnir eru svaraðir, áðrenn møtt verður í starvsstovuni </em>. Frágreiðing um venjingina skal verða skrivað og skjalprógvað við PSpice rástekningum (diagrammum) og útskriftum av simuleringum, tekningum av royndaruppsetingum og mátiúrslitum. Frágreiðingin skal enda við einari stuttari fakligari meting av úrslitunum og niðurstøðu (diskussión og konklusión). Vit royna í fyrsta umfari eina trýstøðu uppseting og velja tíðarbilini, har reytt, gult og grønt ljós eru av hóskandi tíðarlongd, t.d tíðarraðfylgjuna í talvuni, har hvør puntur svarar til tíðarbili T (sek): </p>
<p>Norður –</p>
<p>Suður</p>
<p xml:lang="eng">R R R R R R R R R R R G G G G G G G Y Y</p>
<p>Eystur –</p>
<p>Vestur</p>
<p>R G G G G G G G Y Y R R R R R R R R R R <em type="bold">1. Tíðarraðfylgjurás - klokkusignalgerði </em></p>
<p>Í mynd 2 er ein tíðarraðfylgjurás (<span type="quote" xml:lang="dan">“timer”</span><span type="quote">”) víst, har virðini av mótstøðum og kondensatorum eru vald tilvildarligt. Á útganginum á 555 verður skaptur ein periodiskur fýrkantaður spenningur við niðara og ovara virði ávikavist umleið 0 og 5 volt. C1 , R5 og R1 avgera periodustøddina. Kondensatorurin C2 kann veljast frítt innan fyri víð mørk, men er settur til 10 nanofarad í hesi uppstillingini. Sí annars datablaðið fyri “timer”</span><span type="quote" xml:lang="dan">“timer”</span>-IC rásina, <em type="italic">skjal 3 </em>, og ein viðgerð av rásini finst í <em type="italic">skjali 4 </em>. </p>
<p>Mynd 2 <span type="quote" xml:lang="eng">”Timer 555”</span>-rás nýtt til klokkusignalgerða.</p>
<p><em type="bold">Spurningar at svara áðrenn møtt verður í starvsstovuni: </em>1.1. </p>
<p>Greið frá, hvussu henda rásin virkar, og kann geva fýrkantaðar pulsar út (Vout). Brúka uppgivnu keldur og databløðum at svara spurninginum. 1.2.</p>
<p type="listitem">Vís og grundgev fyri:</p>
<p type="listitem">At kondensatorurin C1 hevur uppløðingartíðina t1=0,693⋅(R1 + R5)⋅C1</p>
<p type="listitem">At kondensatorurin C1 hevur avløðingartíðina t2=0,693⋅R5⋅C1</p>
<p type="listitem">At signalfrekvensurin hevur støddina givna við hesum formlinum  ()15111, 44f</p>
<p xml:lang="eng">R2R C==+1.3.</p>
<p>Finn virði av R1 , R5 og C1 soleiðis, at periodan verður T = 1 sekund? (T er sett til 1 sekund av praktiskum áðum. Í veruligari skipan skal T vera nakað longri, t.d. 3 – 5 sekund.)</p>
<p><em type="bold">Spurningar at svara við brúk av teldusimuleringsforritinum PSpice: </em>1.3. </p>
<p>Ger eina uppseting við Pspice forritinum av tíðarfylgurrásini í telduni við funnu virðunum fyri R1 , R5 og C. Prenta tekningina (diagrammið) til at seta í frágreiðingina. 1.4.</p>
<p>Ger eina simulering av útgangsspenninginum, og spenninginum yvir C1 sum funktión av tíðini. Prenta myndina til at skjalfesta úrslitið.</p>
<p><em type="bold">Spurningar at svara í starvsstovuni: </em>1.5. </p>
<p>Ger eina starvsstovuuppseting av tíðarfylgurrásini. Skjalfest uppsetingina við eini tekning (diagrammi). 1.6.</p>
<p>Máta útgangsspenningin og spenningin yvir C1 sum funktión av tíðini. 1.7.</p>
<p>Hvussu neyvt er frekvensurin f tann rætti. <em type="bold">2. Teljara og dekodararás stýrd av klokkusignalgerði </em></p>
<p>Endamálið við rásini er at gera 20 útgangir, sum eftir túri vera aktivir (í hesi royndini eru rásútgangirnir aktivt-lágir). Klokkusignalgerðin umrøddur í 1. verður nú brúktur sum innsignal til ein dekadiskan teljara. Útgangsbittini frá teljaranum verða dekodaði í tveimum dekodarum, harav hvør ger 10 útgangssignal, t.e. 20 í alt. Bert eitt av teimum skal verða aktivt (lágt). Teljarin skal sostatt fáa fyrst annan dekodaran at skifta sekventielt gjøgnum 10 ymsar støður og síðani hin. Dekodararnir, ið verða brúktir, hava <span type="quote" xml:lang="eng">”open collector”</span>, tað merkir, at teir skulu hava eina ytri last, tá teir verða settir inn í eina veruliga rás. Teir hava í veruleikanum 16 útgangir hvør, men vit brúka bert 10 teir fyrstu beinleiðis sum útsignal í hesi royndini. Ein JK flipp-floppur (JK vippa) (skjal verður brúktur til at stýra hvør av dekodarunum skal svara uppá útgangin frá teljaranum. Hetta kann verða gjørt á tvinnanda mátar, sum víst er í mynd 3og 4. Úrslitið frá dekodarunum er tað sama.</p>
<p xml:lang="eng">Mynd 3</p>
<p>Mynd 4. Viðmerking: Dekodararnir í hesi uppstilling eins og í mynd 3 eru <em type="italic">ikki </em>við open collector, men kunnu býtast um við 74159 við open collector. </p>
<p><em type="bold">Spurningar at svara við brúk av teldusimuleringsforritinum PSpice: </em>2.1. </p>
<p>Ger eina uppseting við Pspice forritinum av tíðarfylgurrásini í telduni sum framhald av uppsetingini frá 1.1 við antin at brúka uppseting mynd 3 ella 4. Prenta tekningina (diagrammið) til at seta í frágreiðingina. (Uppsetingin í mynd 4 er einfaldari, og hevur færri komponentar og er tí lættari at byggja víðari uppá uttan at renna seg ímóti avmarkingunum í (evalueringsversiónini av Pspice forritinum). 2.2.</p>
<p>Ger eina simulering av útgangssignalunum á báðum dekodarunum (Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8, Y9, Y10, Y11, Y12, Y13, Y14 og Y15) og útgangssignalunum frá teljaranum, umframt útgangsspenninginum Vout og spenninginum yvir C1 sum funktión av tíðini. Tulka úrslitið við.</p>
<p>Prenta myndina til at skjalfesta úrslitið.</p>
<p><em type="bold">Spurningar at svara í starvsstovuni: </em>2.3. </p>
<p>Ger eina starvsstovuuppseting av samlaðu rásini í mynd 3 ella 4. Skjalfest uppsetingina við eini tekning (diagrammi). 2.4.</p>
<p>Máta útsignalini frá dekodarunum og teljaranum saman við útgangsspenninginum og spenninginum yvir C1 sum funktión av tíðini.</p>
<p>Skjalfest úrslitini. 2.5.</p>
<p>Grundgev fyri, at bert útsignalini Y0...Y9 verða brúkt til at stýra ljóssignalinum. <em type="bold">3. Trafikkljós stýrd av dekodarauppseting </em></p>
<p>Uppsetingin frá parti 2 verður nú útbygd við reyðum, gulum og grønum ljósdiodum til at mynda eitt modell av trafikkljósum, ið verða stýrd av dekodarauppsetingini. Ein møguleiki av hesi uppsetingini er vístur í mynd 5. Her er Pspicemodell av klokkusignalgerða sett í staðin fyri tann uppbydgu klokkusignalgerðarrásina frá parti 1 fyri at sleppa undan at verða avmarkaður av evaluerings-treytunum í Pspice. <em type="bold">Spurningar at svara við brúk av teldusimuleringsforritinum PSpice: </em>3.1. </p>
<p>Ger eina uppseting í telduni við Pspice forritinum av tíðarraðfylgurrásini í mynd 4 sum framhald av uppsetingini frá 2.1. Prenta tekningina (diagrammið) til at seta í frágreiðingina. 3.2.</p>
<p>Ger eina simulering av ljósdiodusignalunum. Prenta myndina til at skjalfesta úrslitið. 3.3.</p>
<p>Ger eina nágreiniliga tulking av funktiónini av uppsettu ljósdiodurásini við valdu dekodarunum, ið hava <span type="quote" xml:lang="eng">”open collector”</span> útgang. Tulka eisini úrslitini.</p>
<p><em type="bold">Spurningar at svara í starvsstovuni: </em>3.4. </p>
<p>Ger eina starvsstovuuppseting av samlaðu rásini í mynd 4. Skjalfest uppsetingina við eini tekning (diagrammi). 3.5.</p>
<p>Vís, at ljósdiodurnar tendra og slókna í rættari raðfylgju.</p>
<p>Tað vísir seg at vera torført at finna tann brúkta dekodaran 74159 við open collector. Tí er eitt alternativt uppdkot sett upp í mynd 6, har dekodarin 74154, ið <em type="italic">ikki </em>hevur open collector er nýttur. Tað krevur so nakrar eyka gatir, har summar hava open </p>
<p xml:lang="eng">Mynd 5</p>
<p>Mynd 6 collector. Um ljósini eru ljósdiodur, sum víst, er kanska møguligt at fáa uppsetingina at virka við vanligum gatum eisini. <em type="bold">Eyka spurningar </em>3.6. </p>
<p>Hvussu kann uppsetingin verða broytt so, at ljósini skifta í hesi raðfylgju:</p>
<p>Norður –</p>
<p>Suður</p>
<p xml:lang="eng">R R R R R R R R R R R/Y G G G G G G G Y Y</p>
<p>Eystur –</p>
<p xml:lang="eng">Vestur R/Y G G G G G G G Y Y R R R R R R R R R R</p>
<p>Har R/Y stendur fyri at bæði reytt og gult lýsa samstundis 3.7.</p>
<p>Simulera hesa uppseting við Pspice 3.8.</p>
<p>Vís, at hon eisini virkar í starvsstovuni. <em type="bold">4. Tilvísingar </em>1. <span type="quote" xml:lang="eng">”Traffic Light Control Circuit”</span>, http://home.cogeco.ca/~rpaisley4/20step.html 2. Magnus Danielsen, <span type="quote">“INNLEIÐANDI ELEKTRONIKKUR, Støði undir digitalum elektronikki”</span>, NVDrit 2005:12, 2005, sí Kapittul 10. PSpice simuleringsforrit, stutt leiðbeining http://setur.fo/uploads/tx_userpubrep/NVDrit2005_12.pdf 3. National Semiconductor, <span type="quote" xml:lang="eng">”LM555 – Timer”</span>, http://www.national.com/ds/LM/LM555.pdf 4. Tony van Roon: “555 Timer <em type="bold">/ </em>Oscillator Tutorial”, http://www.uoguelph.ca/~antoon/gadgets/555/555.html 5. Dekodari: 4 til 16 http://www.aeromech.usyd.edu.au/MTRXLAB/ref/components/TTL/DM74LS 154.pdf. ella http://web.mit.edu/6.115/www/datasheets/74hc154.pdf. 6. Dekodari: 4 til 10 BCD http://www.nxp.com/acrobat_download/datasheets/74HC_HCT42_CNV_2.pd f </p>
<p xml:lang="dan"><em type="bold">II. Switch-mode regulering til DC motor </em></p>
<p>Benadikt Joensen</p>
<p>Í venjingini verður ein rás sett upp til regulering av DC motori við støði í hugtakinum <span type="quote" xml:lang="dan">“swiltch-mode regulering”</span>, har motorurin fær streym sum streympulsar, konstantir í stødd, men við skiftandi tíðarlongd soleiðis, at miðalvirðið á streyminum skiftir alt eftir longdini av pulsunum og stýrir, hvussu skjótt motorurin skal ganga. Trý streymrásupp-skot eru til, hvussu hetta kann verða gjørt. Tíðarbilgerandi eindin av uppsetingunum er ein astabilur multivibrator, uppbygdur við ávikavist invertara við innbygdum schmitt triggara, operatiónsstyrkjara og <span type="quote">“555-timara”</span>. Streymberandi stýrieindin er eisini ymisk í uppsetingunum, har antin ein bipolerur transistor ella ein felteffekt transistor (FET) verður brúktur. <em type="bold">1. Uppseting við tíðarbil gerandi eind við støði í invertara </em></p>
<p>Sum víst er í mynd 1 er tíðarbil skapandi eindin ein invertari við innbygdum schmitt triggara, og eini positivari <span type="quote" xml:lang="eng">“feed-back”</span> rás uppbygd av mótstøðuni R1 , potentiometrinum R2, og tveimum diodum, umframt einum kondensatori C, ið saman við mótstøðunum avger tíðarbilið, tá streymurin til motorin skal vera høgur. 5 inverarar við innbygdum schmitt triggarum í parallell eru settir í seriu við mótstøðu R3 og binda tíðarbileindina við ein DC motor gjøgnum streymst stýrieindina, ið her er ein bipolerur transisitor.</p>
<p xml:lang="eng">Mynd 1</p>
<p>Tíðarbil skapandi invertari 5 invertarar við Smitt triggara</p>
<p>DCmotorur <em type="bold">2. Uppseting við tíðarbil gerandi eind við støði í operatiónsstyrkjara </em></p>
<p>Sum víst er í mynd 2 er tíðarbil skapandi eindin ein operatiónsstyrkjari í astabilari multivibratorrás, við eini positivari <span type="quote" xml:lang="eng">“feed-back”</span> rás uppbygd av mótstøðuni R1 , potentiometrinum R2, og tveimum diodum, umframt einum kondensatori C, ið saman við mótstøðunum avger tíðarbilið, tá streymurin til motorin skal vera høgur. Við mótstøðunum R3, R4 og R6 verður ein hóskandi spenningsstødd løgd fyri tann lága spenningin í pulsrøðini. Útgangurin frá astabila multivibratorinum verður bundin gjøgnum mótstøðuna R5 saman við ein DC motor gjøgnum streymberandi stýrieindina, ið her er ein felteffekt transisitor (FET). Felteffekt transistorin er tryggjaður móti ov høgum spenningi við diodu. − +</p>
<p xml:lang="eng">R3</p>
<p xml:lang="eng">R4</p>
<p xml:lang="eng">R6</p>
<p xml:lang="eng">R1</p>
<p xml:lang="eng">R2</p>
<p xml:lang="eng">R5</p>
<p xml:lang="eng">Mynd 2</p>
<p>DC- motorur <em type="bold">3. Uppseting við tíðarbil gerandi eind við støði í operatiónsstyrkjara </em></p>
<p>Sum víst er í mynd 3 er tíðarbil skapandi eindin ein <span type="quote">“555-timara”</span> bundin til mótstøðuni R1 , potentiometrinum R2, og tvær diodur, umframt ein kondensator C, ið saman við mótstøðunum avger tíðarbilið, tá streymurin til motorin skal vera høgur. Útgangurin frá <span type="quote">“555-timaranum”</span> verður bundin gjøgnum mótstøðuna R3 saman við ein DC motor gjøgnum streymberandi stýrieindina, ið her er ein felteffekt transisitor (FET). Felteffekt transistorin er tryggjaður móti ov høgum spenningi við diodu.</p>
<p xml:lang="eng">R4</p>
<p xml:lang="eng">R1</p>
<p xml:lang="eng">R2</p>
<p xml:lang="eng">R3</p>
<p xml:lang="eng"><em type="bold">DC motoru </em></p>
<p>Mynd 3 3 <em type="bold">555 </em>2 6 <em type="bold">4. Venjingarskrá </em></p>
<p type="listitem">Venjingarskráin er tann sama uttan mun til omanfyri givnu streymrásir.</p>
<p type="listitem">Útrokningar áðrenn uppstillingin verður sett saman: 1  Vel eina av nevndu rásum til at uppbyggja og kanna.  2  Avger ella rokna passandi virði fyri allar mótstøðurnar Ri og kondensatorin C, sum eru við til at fastleggja frekvensin.  (Um t.d. R er givin, skal C roknast). 3  Set streymrásina saman sambært funnu elektronisku lutunum.</p>
<p type="listitem">Mátingar (Minst til at avlesa øll relevant virði á ossil oskopinum!!)</p>
<p>Máta við ossilloskopi, hvussu hesi signal síggja út við <em type="italic">t/T </em>umleið 0,5 , har <em type="italic">t </em>er pulslongdin og <em type="italic">T </em>er periodulongdin: 4 Spenningurin yvir mótstøðuna, ið er bundin til basis ella gate (t.e. <em type="italic">R </em>3 ella <em type="italic">R </em>5). 5 Inngangsspenningurin á transistorinum (t.e. basisspenningur ella gatespenningur í mun til jørð). 6 Útspenningur á transistorinum (t.e. collektor-emitter spenningur ella drain-source spenningur) </p>
<p>Máta við ossilloskopi, hvussu hesi signal síggja út við <em type="italic">t </em>/ <em type="italic">T </em>umleið 0,1, umleið 0,5 og umleið 0,9 , har <em type="italic">t </em>er pulslongdin og <em type="italic">T </em>er periodulongdin. 7 Inn- og útspenningur á ossillatorrásini 8 Spenningur yvir motorin og streymur gjøgnum motorin 9 Hygg at streyminum í einum resistansi, sum verður settur í staðin fyri motorin </p>
<p>Máta við ossilloskopi og voltmetri: 10 Hvussu hongur motorspenningurin saman við <em type="italic">t </em>/ <em type="italic">T </em>fyri <em type="italic">t </em>/ <em type="italic">T </em>umleið 0,1 - 0,3 - 0,5 - 0,7 og 0,9. <em type="italic"></em></p>
<p><em type="bold">Útrokningar aftaná mátingina: </em>11 Samanber allar mátingar við útrokningar. 12 Skriva frágreiðing um venjingina, við frágreiðandi teksti um, hvussu reguleringin virkar, úrslitum av útrokningunum, úrslitum av mátingunum, samanbering av útrokningum og mátingum, og einari diskussión av, hvussu samsvarið er millum hesi. </p>
<p xml:lang="dan"><em type="bold">III. Kombinatoriskar rásir </em></p>
<p xml:lang="dan">Magnus Danielsen</p>
<p>Í hesi venjingini verður Quartus II brúkt til forritan av FPGA (ella CPLD) rásum við brúk av VHDL og Schematic. Sum dømi um VHDL og Schematic forritan av kombinatoriskum rásum verða her tikin upp til viðgerðar hesi dømi: 1.Dekodarar, 2.Innkodarar, 3.Komparator, og 4.Ein lítil stýriskipan til at tendra og sløkkja útiljósið til eini sethús til tess at tendra, tá hóskandi er, og fyri at spara orku. Til forritanina av FPGA verður ein ALTERA DE2-70 royndarbonkur brúktur sum vístur er í myndini. Altera DE2-70 royndarbonkurin hevur umframt ein FPGA , nógva útgerð, millum annað tveir innbygdar klokkusignalgerðum 28 MHz og 50 MHz, 18 digitalar 0/1-signal umskiftikontaktum, 4 0/1-signal trýstkontaktir, 18 reyðar og 9 grønar ljósdiodur til lesing av digitalum signalum, LCD display og fleiri markamót til tilknýtta útgerð og mátitól til FPGA’in. Til betri útgreining av møguleikum og handfaring av hesum borði umframt brúk av Quartus II til VHDL forritan og Schematic forritan verður víst til tilvísingar [1-4].</p>
<p type="listitem">ALTERA DE2-70 Royndarbonkur1.  Dekodarar  Viðgjørdir verða oktalir dekodarar. Ein oktalur dekodari er ein dekodari, ið hevur 23 =  8 útgangsignal og 3 inngangssignal soleiðis, at tað binera talið, ið er myndað av  inngangs-signalunum peikar á útgangin (t.e. ger útgangin aktivan), ið hevur hetta talið  sum nummar. Útgangirnir kunnu antin vera aktivt høgir ella lágir. Í venjingini verða  gjørdir tveir oktalir dekodarar, sum vístir eru í mynd 1.1 og mynd 1.2.                            Oktalur dekodari – aktivt høgir inn- og útgangir. Ein enable inngangur  Oktali dekodarin, sum vístur er í mynd 1.1, hevur hesar eginleikar:</p>
<p type="listitem">3 aktivt høgar inngangir 012a , a , a</p>
<p type="listitem">8 aktivt høgar útgangir 01234567y , y , y , y , y , y , y , y</p>
<p type="listitem">1 enable inngang E, ið er aktivt høgur.   1.1</p>
<p>Skriva eitt VHDL forrit fyri dekodaran 1.2</p>
<p>Simulera dekodaran við at uppseta eitt signal royndarforrit (<span type="quote" xml:lang="dan">”waveform program”</span>), ið vísir úrslitini av útgangssignalunum 01234567y , y , y , y , y , y , y , y fyri allar møguleikar av inngangssignalunum 012a , a , a000, 001,...,111=, og enable = E = 0, 1. 1.3</p>
<p>Sniðgev forritið til ein Altera DE2-70 royndarbonk við einari integreraðari rás av FPGA slagnum soleiðis, at ljósdiodur vísa ymsu signalini, og inngangssignalini og enable signalið verða sett við hartil hoyrandi kontaktum. 1.4 <span type="quote" xml:lang="eng">”Downloada”</span> forritið á FPGA’in. 1.5</p>
<p>Royn forritaða FPGA’in, skjalfest úrslitið og samanber við simuleringina.</p>
<p type="listitem">Oktalur dekodari 74138 – aktivt lágir inn- og útgangir. Fleiri enable inngangir.  Oktali dekodarin, vístur í mynd 1.2, hevur eginleikar sum oktalur dekodari 74138, t.e.</p>
<p type="listitem">3 aktivt lágar inngangir012a , a , a</p>
<p type="listitem">8 aktivt lágar útgangir01234567y , y , y , y , y , y , y , y</p>
<p type="listitem">3 <span type="quote" xml:lang="eng">”enable”</span> inngangir 123</p>
<p>E , E , E , har ein er aktivt høgur, og tveir eru aktivt lágir. 1.6</p>
<p>Skriva eitt VHDL forrit fyri dekodaran. Hetta kann gerast við at broyta forritið frá dekodaranum í spurningi 1.1 hóskandi.</p>
<p>Mynd 1.1 Oktalur dekodari við aktivt høgum inn- og útgangum y0 a0 y1 y2 a1 y3 y4 a2 y5 y6 012a a a01234567yyyyyyyy</p>
<p xml:lang="eng">E y0 a0 y1 y2 a1 y3 y4 a2 y5 y6 _ _ E1 E2 E3012aaa01234567y y y y y y y y</p>
<p>Mynd 1.2 Oktalur dekodari 74138 1.7</p>
<p>Simulera dekodaran við at uppseta eitt signal royndarforrit, ið vísir úrslitini av útgangs-signalunum 01234567y , y , y , y , y , y , y , y fyri allar møguleikar av inngangssignalunum 012a ,a ,a000,001,...,111=, og enable inngangssignalunum 123</p>
<p>E , E , E000,001,...,111=. Hetta kann gerast við at broyta signal royndarforritið frá spurningi 1.2 hóskandi. 1.8</p>
<p type="listitem">Sniðgev forritið til ein Altera DE2-70 royndarbonk við einari integreraðari  rás av FPGA slagnum soleiðis, at ljósdiodur vísa ymsu signalini, svarandi  til, at inngangssignalini og enable signalini verða sett við hartil hoyrandi  kontaktum. 1.9 <span type="quote" xml:lang="eng">”Downloada”</span> forritið á FPGA’in. 1.10  Royn forritaða FPGA’in, skjalfest úrslitið og samanber við simuleringina.    2.  Prioritets innkodarar                          Ein oktalur innkodari hevur 23 = 8 inngangsignal og 3 útgangssignal soleiðis, at tað  binera talið, ið útgangssignalini mynda, er  nummarið á tí innganginum, sum er aktivur.  Útgangir og inngangir kunnu antin vera  aktivt høgir ella lágir. Innkodarin hevur tann  veikleika, at hann gevur rætt úrslit um bert  ein inngangur er aktivur. Eru fleiri aktivir  samstundis kemur fløkja í, og innkodarin  kann ikki geva rætt úrslit.      Ein prioritets innkodari líkist <span type="quote">”vanliga”</span> innkodaranum við tað, at hann virkar sum  hesin, um bert ein av inngangunum er aktivur. Eru harafturímóti fleiri inngangir  aktivir, gevur hann útgangsúrslitið, ið svarar til nummarið á tí innganginum, sum  hevur hægst nummar. Í venjingini verða gjørdir tveir oktalir prioritets innkodarar,   vístir í mynd 2.1 og 2.2. Prioritetsinnkodarin í mynd 2.2 hevur sannleika-talvuna í  mynd 2.3    Oktalur prioritets innkodari – aktivt høgir inn- og útgangir. Ein enable inngangur  Oktali prioritets innkodarin, sum vístur er í mynd 2.1, hevur hesar eginleikar:</p>
<p type="listitem">8 aktivt høgar inngangir</p>
<p type="listitem">3 aktivt høgar útgangir</p>
<p type="listitem">1 enable inngang, ið er aktivt høgur.</p>
<p>Mynd 2.3 Sannleikatalva fyri oktalan prioritets innkodara 012y y y01234567aaaaaaaa</p>
<p>Mynd 2.1 Oktalur prioritets innkodari við aktivt høgum inn- og útgangum a0 y1 y0 a2 a3 y1 a4 a5 y2 a6</p>
<p>Mynd 2.2 Oktalur prioritets innkodari 74138 við aktivt lágum inn- og útgangum a0 y0 a1 a2 y1 a3 a4 y2 a5 a6 EOa7 GS en_ E1 01234567a a a a a a a a012yyy</p>
<p xml:lang="eng">EO</p>
<p>GS2.1</p>
<p>Skriva eitt VHDL forrit fyri prioritets innkodaran 2.2</p>
<p>Simulera innkodaran við at uppseta eitt signal royndarforrit, ið vísir úrslitini av útgangssignalunum 012y , y , y fyri eitt hóskandi tal av møguleikum av inngangssignalunum 01234567a , a , a , a , a , a , a , a= 00000000, 00000001, 00000010, 00000011,...,11111111, og enable = E = 0, 1. Av tí at møguleikarnir her eru so nógvir, er neyðugt at avmarka royndina til hóskandi tal av viðkomandi møguleikum. 2.3</p>
<p>Sniðgev forritið til ein Altera DE2-70 royndarbonk við einari integreraðari rás av FPGA slagnum soleiðis, at ljósdiodur vísa ymsu signalini, og inngangssignalini og enable signalið verða sett við hartil hoyrandi kontaktum. 2.4 <span type="quote" xml:lang="eng">”Downloada”</span> forritið á FPGA’in. 2.5</p>
<p>Royn forritaða FPGA’in, skjalfest úrslitið og samanber við simuleringina.</p>
<p type="listitem">Oktalur prioritets innkodari 74148 – aktivt høgir inn- og útgangir. Ein enable  inngangur, ein enable útgangur og ein <span type="quote" xml:lang="eng">”group signal”</span> útgangur.  Oktali prioritets innkodarin, sum er vístur í mynd 2.2 hevur somu eginleikar sum  oktali prioritets innkodari 74148 , t.e. hevur sambært sannleikatalvuni í mynd 2.3:</p>
<p type="listitem">8 aktivt lágar inngangir</p>
<p type="listitem" xml:lang="eng">1 aktivt lágan enable inngang EI (Enable In).</p>
<p type="listitem">3 aktivt lágar útgangir</p>
<p type="listitem">1 aktivt lágan GS (Group Signal ella Group Select) útgang, ið er aktivur, tá bert onkur inngangur er aktivur og EI er aktivur.</p>
<p type="listitem">1 aktivt lágan enable EO (Enable Output) útgang, ið er aktivur, tá eingin inngangur er aktivur, og EI er aktivur.  2.6</p>
<p>Skriva eitt VHDL forrit fyri dekodaran. Hetta kann gerast við at broyta forritið frá dekodaranum í spurningi 1.1 hóskandi. 2.7</p>
<p>Simulera dekodarin við at uppseta eitt signal royndarforrit, ið vísir úrslitini av útgangssignalunum 012y , y , y , EO og GS allar møguleikar av inngangssignalunum 01234567a , a , a , a , a , a , a , a00000000, 00000001, 00000010, 00000011,...,11111111=, og</p>
<p xml:lang="eng">EI 0,1=.</p>
<p>Hetta kann gerast við at broyta signalroyndarforritið frá spurningi 1.2 hóskandi. 2.8</p>
<p type="listitem">Sniðgev forritið til ein Altera DE2-70 royndarbonk við einari integreraðari  rás av FPGA slagnum soleiðis, at ljósdiodur vísa ymsu signalini, og  inngangssignalini og enable signalini verða sett við hartil hoyrandi  kontaktum. 2.9 <span type="quote" xml:lang="eng">”Downloada”</span> forritið á FPGA’in. 2.10  Royn forritaða FPGA’in, skjalfest úrslitið og samanber við simuleringina.   3.  Komparator  Í Quartus II er eitt savn av forritaðum modellum av kombinatoriskum rásum til  Schematic, ið hava møguleikan til at verða tillagaðir til ávís endamál. Hesar hava  prinsipiellar funktiónir so sum teljarar, komparatorar ,addarar o.s.v.  Tað, sum  sermerkir hesi model er, at tað er møguligt at tillaga inngangir, útgangir og funktiónir  av hvørjum einstøkum luti eftir ynski til at kunna nøkta tað funktión tørvur er á.                         Í hesi venjingini verður ein komparator valdur til at gera eina skipan, ið samanber  tvey 8 bit biner tøl A og B og avger, um tey eru eins, samstundis sum avgjørt verður,  um tey eru ólíka ella líka tøl. Royndaruppsetingin er víst í mynd 3.1.  Kompatatormodellið lpm_compare verður brúkt. Nakrar av støddunum A og B,  umframt útgangssignalini aeb, agb, og alb verða brúkt sum inngangssignal til eina  kombinatoriska rás, ið skal gera útgangssignalini X og Y soleiðis, at</p>
<p type="listitem">X = 1, tá A = B, og bæði A og B eru líka tøl</p>
<p type="listitem">Y = 1, tá A = B, og bæði A og B eru ólíka tøl</p>
<p>Ger forrit við Schematictil henda komparatorin og forrita ein FPGA við honum. 3.1</p>
<p>Tillaga komparatorin soleiðis, at hann hevur tveir 8 bit datainngangir og tríggjar útgangir aeb (a equal to b), agb (a greater than b) og alb (a less than b). 3.2</p>
<p>Ger eina kombinatoriska rás, sum við A, B, aeb, agb og alb gevur tey ynsktu signalini X ogY á útganginum. Forrita hana við Schematic. 3.3</p>
<p>Simulera komparatoruppsetingina við at uppseta eitt signal royndarforrit, ið vísir úrslitini av útgangssignalunum X og Y við hóskandi úrvali av inngangssignalum A og B. 3.4</p>
<p>Sniðgev forritið til ein Altera DE2-70 royndarbonk við einari integreraðari rás av FPGA slagnum soleiðis, at ljósdiodur vísa ymsu signalini, og inngangssignalini verða sett við hartil hoyrandi kontaktum. 3.5 <span type="quote" xml:lang="eng">”Downloada”</span> forritið á FPGA’in. 3.6</p>
<p>Royn forritaða FPGA’in, skjalfest úrslitið og samanber við simuleringina. unsigned com paredataa[7..0] datab[7..0]aeb agbalblpm_compare1inst</p>
<p xml:lang="eng">Komb.rás</p>
<p xml:lang="eng">A[7..0]</p>
<p>B[7..0]</p>
<p type="listitem">Mynd 3.1 8 8 4.  Stýriskipan til at tendra og sløkkja útiljósið við  Uttan fyri eini sethús er lampa til útiljós, ið er ætlað at lýsa, tá brúk er fyri ljósi, og at  vera slókt annars til tess at geva eitt nøktandi umhvørvi, men samstundis spara mest  møguliga orku. Hetta kann verða gjørt við kombinatoriskari rás. Skipað skal soleiðis  vera fyri, at</p>
<p type="listitem">Um dagin, tá ljóst er, skal lampan vera sløkt</p>
<p type="listitem">Tá dagur tekur at halla, og tað verður myrkt og fram til miðnátt, skal lampan vera tendrað so, at tað verður lagaligt at koma til húsið.</p>
<p type="listitem">Eftir miðnátt verður lampan slókt fyri at spara streym</p>
<p type="listitem">Men kemur onkur, sjálvt aftan á miðnátt, t.d. blaðútberingin ella onkur seinur gestur inn um garðsportrið, skal lampan tendrað, men slóknar aftur, tá  garðsportrið verður latið aftur (møguliga við tíðarseinking).</p>
<p>Ljósið verður mátað við fotodiodu, ið leiðir streym, meðan ljóst er og ongan streym í myrkri. Streymurin gevur logiska signali L = 1, tá fotodiodan leiðir streym, og L = 0, tá fotodiodan ikki ber streym. Eitt logiskt signal K kemur frá klokku soleiðis, at K = 1 um klokkan er 00-12, tá lampan er sløkt, um portrið er aftur, og K = 0 um klokkan er 12-24, tá lampan er tendrað, um myrkt er. Eitt relé mátar um garðsportrið er aftur ella opið. Frá tí kemur eitt logiskt signal G soleiðis, at G = 0, um tað er aftur, og G = 1 um tað er opið. Til at stýra um lampan skal vera tendrað ella slókt, verður logisk rás uppbygd við inngangssignalunum L, K og G og einum útgangssignali F, ið stýrir, um lampan er tendrað ella slókt. Til tess at tryggja, at lampan tendrar, um signalið á útganginum á logisku rásini fellur burtur, skal lampan tendra, tá F = 0, og lampan slóknar tá F = 1. Til at gera hetta í veruleikanum verður ein FPGA programmeraður til at gera hesa logisku funktiónia F. Til at fremja hetta verða hesir spurningarnir svaraðir: 4.1</p>
<p>Ger eina sannleikatalvu av variablunum L K G og F 4.2</p>
<p>Set eitt logiskt sum av produktum upp fyri F 4.3</p>
<p>Ger eitt VHDL program fyri at finna F sum funktión av LKG 4.4</p>
<p>Simulera F 4.5</p>
<p>Endurtak 3. og 4. við Schematics 4.6</p>
<p>Programmera ein FPGA við programminum, og royn um funktiónin er røtt 4.7</p>
<p>Skjalfest hvørt punktið við útskriftum og notatum</p>
<p xml:lang="eng"><em type="bold">Tilvísingar: </em>[1] ALTERA DE2-70 User Manual [2] Getting Started with Altera DE2-70 board [3] Quartus II Introduction Using VHDL Design [4] Quartus II Introduction Using Schematic Design </p>
<p xml:lang="dan"><em type="bold">IV. CMI – Koding og dekoding </em><em type="bold">til ljósleiðara datasendiskipan </em></p>
<p>Magnus Danielsen <em type="bold">1. Inngangur </em>Venjingin snýr seg um greining av uppbygging og virkihátti av CMI kodingsskipanini, ið m.a. verður brúkt í optiskum transmissiónsskipanum. Skipanin er uppbygd av undireind-um, sum hvør sær fyrst verður uppbygd og kannað. Síðan verða tær bundnar saman til eina samanhangandi transmissiónsskipan, hvørs transmissiónseginleikar verða kannaðir. Starvsstovuvenjingin er áður gjørd við støði í skjalinum NVDRit 2005:13, har CMI kodari og CMI-dekodari verða uppbygdir við brúk av SSI (Small-Scale Integration) og MSI (Medium-Scale Integration) IC-chippum. Vit skulu í hesi venjingini viðgera CMI kodara og CMI dekodara við somu funktiónum, men verða teir nú gjørdir við at forrita ein VLSI (Very Large Scale Integration) FPGA chip (CPLD chippur kann eisini verða brúktur) við Schematic ella VHDL forritan. Til forritanina og simulering av skipanini verður Quartus II brúkt. Spurningarnir viðvíkjandi forritanini verða fyrst orðaðir, svarandi til brúk av Schematic. Aftan á viðgerðina av ávikavist CMI kodaranum og CMI dekodaranum við Schematic, eru somu spurningar um uppbygging og roynd av teimum, men nú forritaðir við VHDL. Tað verður rátt til, at gera tvær óheftar verkætlanir í Quartus II ein til Schematic og ein til VHDL forritið. Tað kann vera skilagott, annahvørt tað er í Schematic ella VHDL partinum av venjingini, at lata allar undireindirnar vera uppbygdar ella forritaðar í sama skjali, men í fyrstuni óheftar av hvørji aðrari. Tá er tað lættari í øðrum umfari at binda tær sama til eina samlaða skipan. <em type="bold">2. Kodiskipan – endamál og uppbyggjan </em>Í øllum digitalum tele- og datatransmissiónsskipanum, verða kodingsskipanir nýttar til tess at gera transmissiónina av informatión tryggast og best møguliga. Vanliga, tá informatión skal verða borin frá einum staði til annað, verður hetta gjørt við, at informatiónin verður gjørd um til digital signal, ið kunnu vera biner, t.e. ein røð av <span type="quote">“0”</span><span type="quote">”-um og “1”</span><span type="quote">“1”</span>-um, sum verða send hvørt aftan á annað, t.e. sekventielt (serielt), á eini transmissiónslinju. Verður soleiðis tann bineri framburðurin (representatiónin) av signalinum nýttur, býta vit tíðarásin upp í interval av ávísari longd T=1/f, har f verður nevndur klokkufrekvensurin. Í hvørjum av hesum intervallum senda vit eitt signalmynstur (spenningsmynstur), ið er ymiskt fyri <span type="quote">“0”</span> og <span type="quote">“1”</span>, og sigur frá, hvørt av hesum verður sent. Hesa signalmynstur-skipan nevna vit eina kodu fyri transmissiónina. Ein tann mest einfalda, og vit kunnu kanska siga grundleggjandi, kodingin er myndað av, at spenningurin í intervallinum er 0 volt svarandi til logiskt <span type="quote">“0”</span> og V volt svarandi til logiskt <span type="quote">“1”</span>. Hesa koduna nevna vit ta bineru <span type="quote">“unipolaru NRZ”</span> koduna (<span type="quote" xml:lang="eng">“Non Return to Zero”</span><span type="quote">”). NRZ er víst í mynd 2.1 saman við øðrum kodum. Er spenningurin V volt bert í parti, vanliga helvtini av einum 1-intervalli, verður kodan nevnd “unipolar RZ”</span><span type="quote">“unipolar RZ”</span> (<span type="quote" xml:lang="eng">“Return to Zero”</span><span type="quote" xml:lang="dan">”). Er logiskt “0”</span><span type="quote">“0”</span> myndað av spenninginum – </p>
<p>V/2, og <span type="quote">“1”</span> myndað av +V/2 , fáa vit tær tilsvarandi bipolaru ella bert polaru kodurnar. Tað er ikki altíð, at transmissiónskodurnar eru so einfaldar við tað, at tað oftast er ynskt, at tær skulu uppfylla ymsar treytir fyri, at transmissiónin skal gerast so trygg og feilfrí sum gjørligt. Eginleikar í transmissiónini, ið hædd skal takast fyri, kunnu vera av ymiskum slagi. Í koparkaðalum er soleiðis ynskt, at miðalvirðið av signalspenninginum skal vera so nær null sum gjørligt av tí, at transmissión av einum javnstreymi onga nyttu ger, men bert elvir til eitt orkutap. Tí er ynskt í hesum kaðalum, at tað kodaða signalið verður borið av einum spenningi, ið í meðal er null, t.e. eins ofta er positivur sum negativur. Tí verða polarar kodur valdar til hesa transmissión. Í glasfipurkaðalum er hetta ikki nakar trupulleiki við tað, at signalið her er ljós. Harafturímóti er í øllum digitalum transmissiónsskipanum avgerandi, at tað í móttøkuendanum er møguligt at fáa fatur í einum klokkusignali, ið ger tað møguligt at markera, nær tey digitalu signalmynstrini skulu verða avlisin. Hetta klokkusignalið kann sjálvsagt verða sent í serstakari sendikanal, men er tað ein dýrur máti, sum tí ikki verður nýttur.</p>
<p><em type="bold"></em>Í veruligum kommunikatiónsskipanum verður klokkusignalið endurskapt úr sjálvum informatiónssignalinum, sum inniheldur ein frekvenskomposant (Fourier komposant) við sama frekvensi, sum klokkusignalið hevur, ella eitt heiltals multiplum av honum. Fyri at tryggja, at ein long røð av nullum ella eitt tølum í tí digitala signalinum ikki skal geva eitt langt tíðarbil, har kaðalsignalið, tað veri seg í koparkaðali ella ljósleiðarakaðali, er konstant, og tað tí verður torført at endurskapa klokku-signalið, verður ein ella annar formur fyri koding nýttur, sum ger, at signalið, sum sent verður, javnan skiftir við tíðini. Í ljósleiðarasendiskipanum verður ofta tann sokallaða CMI kodan (coded mark inversion) brúkt. Hon fæst fram við at brúka hesar reglar (sí mynd 2.1): - Logiskt <span type="quote">“0”</span> verður myndað í einum klokkuintervalli sum lágt signal í fyrru helvt av intervallinum og sum høgt signal í seinnu helvt av intervallinum, t.e. tað hendir eitt skift frá lágum til høgt signal í miðjuni av intervallinum. Vit </p>
<p>Unipolar RZ 1 0 1 0 0 1 0 1 1 1 0 1 1</p>
<p xml:lang="eng">Polar NRZ</p>
<p xml:lang="eng">CMI 1 0 1 0 0 1 0 1 1 1 0 1 1</p>
<p>Mynd 2.1 kunnu sostatt siga at <span type="quote">“0”</span> verður umsett til at eita <span type="quote">“01”</span> við einum nýggjum klokkuintervalli, ið bert hevur hálva stødd av grundklokkuintervallinum ella dataklokkuintervallinum. - Logiskt <span type="quote">“1”</span> verður myndað sum eitt støðugt signal í øllum dataklokkuintervalli-num. Hetta skiftir millum at vera lágt og høgt aðruhvørja ferð logiskt <span type="quote">”1” kemur fyri. Vit kunnu sostatt siga at “1”</span><span type="quote">“1”</span> er umsett til <span type="quote">“00”</span> ella <span type="quote">“11”</span> aðruhvørja ferð tað fyrikemur.</p>
<p>Tí er brúk fyri at gera eitt klokkusignal við dupultum klokkufrekvensi til tess at stýra CMI koduni. Hesa klokku nevna vit CMI-klokkuna. Í venjingini verður ein CMI kodari og ein CMI dekodari, hóskandi til brúk í einari ljósleiðaraskipan, uppbygdur við forritan av VLSI rás av slagnum FPGA (ella CPLD) og royndur. Av tí at tað her snýr seg um at modulera signalið til eina ljósstrálu frá einum lasara, t.e. sløkkja og tendra hann, brúka vit lágan og høgan spenning til at mynda lágt og høgt niveau í CMI koduni, sum víst í mynd 2.1 Til tess at royna skipanina er brúk fyri einum digitalum inngangssignali, ið er eitt tilvildarligt býti av <span type="quote">“0”</span> og <span type="quote">“1”</span> á tíðarásinum. Best hevði verið at havt ein tilvildarligan orðgerða ella bitgerða til hetta endamál; men til hesa venjingina byggja vit ein orðgerða við einum føstum 8 ella 16 bit orði, ið verður endurtikið periodiskt, og sum vit kunnu stilla eftir ynski. Yvirlitsuppsetingin av skipanini sær út, sum víst í mynd 2.2. Úr orðgerðanum kemur ein røð av bittum í NRZ kodu, sum verður umgjørdur til CMI kodu í CMI kodaranum. Hetta CMI signalið er tað signalið, ið vanliga verður sent gjøgnum ljósleiðaran, sum kortini ikki er við í hesi venjingini. Í móttøkuendanum verður CMI signalið móttikið aftur, og síðan umger CMI dekodarin hesa koduna aftur til NRZ kodu. <em type="bold">3. Klokkur </em>Dataklokkan er grundklokkusignalið, ið stýrir datasignalinum. Síðan hava vit eisini brúk fyri einum CMI-klokkusignali við dupult so stórum frekvensi, sum dataklokkan hevur. Eitt slíkt signal kann verða gjørt við ólineerum elektronikki út frá dataklokkusignalinum, men liggur uttan fyri evni í hesi venjingini. Vit skulu heldur ganga hinvegin og byrja við eini CMI-klokku. Við eini flip-flop skapa vit eitt dataklokkusignal við hálvum CMI-klokku frekvensi. Vit velja ein D flip-flop 7474(mynd 3.1). <em type="italic">At svara áðrenn møtt verður í starvsstovuni: </em></p>
<p><em type="bold">Spurningur 1: </em></p>
<p>Ger eitt diagramm av dataklokkusignalgerðanum og vís, hvar dataklokka og CMI-klokka eru.</p>
<p xml:lang="eng">ORÐGERÐI</p>
<p xml:lang="eng">CMI KODARI</p>
<p xml:lang="eng">CMI DEKODARI</p>
<p xml:lang="eng">CMI</p>
<p>NRZ NRZ</p>
<p xml:lang="eng">Mynd 2.2</p>
<p><em type="italic">At svara í starvsstovuni: </em><em type="bold">Spurningur 2: </em></p>
<p>Bygg dataklokkusignalgerðan upp við Quartus II Schematic og simulera hann. <em type="bold">4. Orðgerði </em>Í hesi venjing hevði verið best at brúkt ein orðgerða, ið ger tilvildarlig orð, til at royna CMI kodaran og dekodaran við. Hann er ikki tøkur. Í staðin fyri vilja vit byggja ein orðgerða, ið kann gera eina fyriskrivaða røð av bittum, ið síðan verður endurtikin periodiskt. Í byrjanini velja vit 8 bit, sum so eitt í senn við hjálp av einum multipleksara 74151 verða send út á útgangin Y. Adressuinngangirnir ABC fáa signal frá binera teljara-num 74393 sum víst á mynd 4.1. Orðið, ið verður sent út á Yútganginum er D0, D1, D2, D3, D4, D5, D6, D7, ið er sett til logiskt <span type="quote">”0” ella logiskt ”1”</span>, svarandi til orðið, ið vit ynskja. <em type="italic">At svara áðrenn møtt verður í starvsstovuni: </em><em type="bold">Spurningur 3 </em>: Hvussu kunnu vit broyta orðgerðan við at brúka enable inngangin á multipleksaranum , soleiðis at 8 bit røðin, sum vit hava stillað við givnum virðum verður eftirfylgd av 8 nullum, og síðan endurtikið periodiskt. <em type="italic">At svara í starvsstovuni: </em><em type="bold">Spurningur 4: </em></p>
<p>Set 8 bit orðgerðan upp í Quartus II Schematic. Ger broytingina sambært sp.3. Simulera orðgerðan, áðrenn og aftan á broytingina. <em type="bold">5. CMI-kodari </em>Sum tað gongur fram av frágreiðingini í parti 2 og mynd 5.1, ger CMI kodarin brúk av einum klokkufrekvensi, sum er dupult so stórur sum dataklokkufrekvensurin. Nú er so spurningurin, hvørjir inngangsvariablar stýra, hvørjum virði 0 ella 1, ið CMI útgangurin skal hava í hvørjum CMI-klokkuintervalli. </p>
<p xml:lang="dan"><em type="bold">D Q /Q </em>0 0 1 1 1 0 </p>
<p xml:lang="eng">Ck 7474 − Q o /Q</p>
<p xml:lang="eng">Mynd 3.1</p>
<p xml:lang="eng">CK QA</p>
<p>QB</p>
<p xml:lang="eng">QC</p>
<p xml:lang="dan">QD</p>
<p xml:lang="eng">CLR</p>
<p xml:lang="dan">EN A B C D0 Y D1 Y D2 D3 D4 D5 D6 D7 <em type="bold">74393 </em><em type="bold">74151 </em></p>
<p xml:lang="eng">Mynd 4.1</p>
<p>Givið er, at datasignalið, ið vit nevna DATA, má vera inngangsvariabul. Vit síggja eisini, at CMI signalið, svarandi til DATA = 0, skiftir í miðjum intervalli. Hetta ger dataklokkan eisini. Tí má dataklokkusignalið <span type="quote" xml:lang="dan">“DKL”</span> vera ein hóskandi inngangsvariabul. CMI signalið svarandi til DATA=1 er konstant í tveimum CMI-klokkuintervallum, men skiftir virði til 0 og 1 aðruhvørja ferð 2 CMI klokkusignal hava verið. Tí mugu vit hava ein variabul, lat okkum nevna hann LEVEL, sum stýrir CMI signalvirðinum í <span type="quote">“1”</span> intervallum, og skiftir virði hvørja ferð eitt DATA=1 kemur inn, men heldur virði tá DATA=0. Level er hinvegin ikki eitt útifrá komandi signal, men má verða gjørt í skipanini. Av tí at LEVEL bert broytist, um DATA hevur verið tvær ferðir 1, tá ein CMI klokkupulsur kom, má tann digitala maskinan, sum skapar LEVEL hava 4 støður svarandi til 2 støðuvariablar (2 flip-flop).</p>
<p><em type="italic">At svara áðrenn møtt verður í starvsstovuni: </em><em type="bold">Spurningur 5: </em></p>
<p>Vís, at útgangssignalið CMI = DATA’xDATAKL’ + DATAxLEVEL.</p>
<p>Allar støður eru vístar á mynd 5.1. <em type="bold">Spurningur 6: </em></p>
<p>Vís, at tann við CMI- klokkuna synkrona digitala maskinan í mynd 5.2 gevur LEVEL signalið. Hetta verður gjørt við at - finna excitatiónslíkningarnar - skriva yvirgangs/útgangstalvu upp - skriva støðu/útgangstalvu upp - definera støðurnar - tekna støðudiagramm - vís á hvar í mynd 5.2 LEVEL signalið er.</p>
<p xml:lang="dan">DATA 1 0 0 1 1 1 0 1</p>
<p xml:lang="eng">CMI-KLOKKA</p>
<p xml:lang="dan">DKL’</p>
<p xml:lang="eng">CMI 1 0 0 1 1 1 0 1</p>
<p xml:lang="eng">LEVEL</p>
<p xml:lang="dan">DATAKLOKKA = DKL</p>
<p xml:lang="eng">Mynd 5.1</p>
<p><em type="italic">At svara í starvsstovuni um CMI-kodari við Schematic: </em><em type="bold">Spurningur 7: </em></p>
<p>Bygg CMI kodaran upp í Quartus II Schematic, og simulera hann.</p>
<p>Brúka inndata frá gjørda orðgerðanum. <em type="bold">Spurningur 8: </em></p>
<p>Forrita FPGA chippin við gjørda Schematic forritinum</p>
<p><em type="bold">Spurningur 9: </em></p>
<p>Royn og dokumentera tann gjørda Schematics forritaða CMI-kodaran</p>
<p>Goym gjørda Schematic forritið sum serstaka verkætlan (navngev hana t.d. CMISchematic) í Quartus II skipanini.</p>
<p>Mynd 5.2 CMI – kodari <em type="italic">At svara í starvsstovuni um CMI kodara forritaður við VHDL </em>Ger nýggja verkætlan í Quartus II skipanini, navngivin við t.d. CMIVHDL, og brúka nú VHDL forritan sum støði til næstu spurningarnar. <em type="bold">Spurningur 10 </em></p>
<p>Uppbygg klokkugerða og orðgerða í VHDL</p>
<p><em type="bold">Spurningur 11 </em></p>
<p>Uppbygg CMI kodaran við Quartus II – VHDL forritan</p>
<p><em type="bold">Spurningur 12 </em></p>
<p>Programmera FPGA chippin við gjørda VHDL forritinum</p>
<p><em type="bold">Spurningur 13 </em></p>
<p>Royn og dokumentera tann gjørda VHDL forritaða CMI kodaran <em type="bold">6. CMI - dekodari </em>Ein dekodari er ein digital maskina, sum broytir CMI koduna til eitt datasignal (tað upprunaliga) við NRZ kodu sambært CMI koda </p>
<p xml:lang="dan">DATA (NRZ-koda) 01 00 00 11 11 11</p>
<p>Í venjingini gera vit CMI dekodara vi¨brúk av skiftiregistri, t.d. 74164 og kombinatoriskum rásum, sum víst í mynd 6 vísir. <em type="italic">At svara áðrenn møtt verður í starvsstovuni svarandi til mynd 6.1: </em><em type="bold">Spurningur 16: </em></p>
<p>Skriva sannleikatalvuna upp fyri kombinatorisku rásina DATAinn sum funktión av QA,QB,QC,QD og QE útgangirnar í skiftiregistrinum svarandi til CMI dekoding. Vís at hendan funktiónin kann realiserast við vístu logisku rásini í mynd 6.1. Vís at útgangsvirði DATA á CMI dekodaranum eru somu data sum inngangsvirði DATA í CMI kodaran. <em type="italic">At svara í starvsstovuni um CMI dekodara forritaður við Schematic: </em><em type="bold">Spurningur 17: </em></p>
<p>Set rásina av CMI dekodaranum saman sum í mynd 6.1 , og royn hana við Quartus II Schematic simulering <em type="bold">Spurningur 18 </em></p>
<p>Programmera FPGA chippin við gjørda Schematics forritinum</p>
<p><em type="bold">Spurningur 19 </em></p>
<p>Royn og dokumentera tann gjørda Schematics forritaða CMI dekodaran <em type="bold">Spurningur 20 </em></p>
<p>Lat dekodaran fáa signalið frá útganginum á kodaranum, og samanber inngangssignalið til CMI kodaran við útgangssignalið á CMI dekodaranum <em type="italic">At svara í starvsstovuni um CMI dekodara forritaður við VHDL: </em><em type="bold">Spurningur 21 </em></p>
<p>Forrita CMI dekodaran við Quartus II VHDL og royn hann við simulering. <em type="bold">Spurningur 22 </em></p>
<p>Programmera FPGA chippin við gjørda VHDL forritinum.</p>
<p><em type="bold">Spurningur 23 </em></p>
<p>Royn og dokumentera tann gjørda VHDL forritaða CMI kodaran.</p>
<p>Lat dekodaran fáa signalið frá útganginum á kodaranum og samanber inngangssignalið til CMI kodaran við útgangssignalið á CMI dekodaranum <em type="bold">7. CMI kodara – dekodara skipan </em><em type="italic">At svara í starvsstovuni: </em><em type="bold">Spurningur 24: </em></p>
<p>Samanbind allar lutskipaninar og royn samlaðu skipanina við at samanbera bitsamansetingina frá orðgerðanum, og tað CMI dekodaranum gjørda signalið.</p>
<p>Mynd 6.1 CMI – dekodari bygdur við skiftiregistari</p>
<p>DATAinn</p>
<p><em type="bold">Spurningur 25: </em></p>
<p>Vís við digitaloscilloskopinum, at transmissiónin gjøgnum kodara og dekodara er virkin eftir ætlan. Eru glitch at síggja í transmitteraða signalinum? <em type="bold">Spurningur 26: </em></p>
<p type="listitem">Hvørjum endamáli tænir tað at seta D-flip-floppar í útgangin av CMI kodaranum og í útgangin av CMI dekodaranum í mynd 5.2 og 6.1?    8.  Starvsstovuútgerð  Til venjingina er henda starvstovuútgerð tøk:</p>
<p type="listitem">Altera DE2-70 royndarbonkur við FPGA chippi, tveimum innbygdum klokkusignal-gerðum 28 MHz og 50 MHz, digitalum 0/1-signal kontaktum,  ljósdiodum til lesing av digitalum signalum, LCD display og fleiri markamót til  tilknýtta útgerð og mátitól.</p>
<p type="listitem">Digitalt oscilloskop við tveimum analogum signalrásum og 16 digitalum signalrásum.</p>
<p>Viðmerkjast skal, at, tá forritaði FPGA chippurin verður royndur, er hent at brúka trýstkontaktstýrt klokkusignal, tá ynskt er, at gongdin í skipanini skal vera so sein, at møguligt er at fylgja signalunum bit fyri bit við ljósdiodunum á royndarbonkinum. Verður harafturímóti digitalt oscilloscop brúkt, kann annar av innbygdu klokkusignalgerðunum verða brúktur og signalgongdin sæst á skýggjanum. Ein møguleiki er eisini at gera eina divisoreind við teljara, ið býtir innbygdað høga frekvensin við einum stórum tali, so at lágur frekvensur t.d. 1 Hz fæst burturúr til at brúka til klokkufrekvens.</p>
<p><em type="bold">V. PIC mikrokontrollari – menning við </em></p>
<p xml:lang="eng"><em type="bold">Proton Development Board </em></p>
<p>Ólavur Simonsen <em type="bold">1. Endamál </em></p>
<p>Endamálið við venjingini er, at fáa innlit í PIC microcontrollaran og síggja, hvussu microcontrollarar verða brúktir í praksis. <em type="bold">2. Útgerð </em></p>
<p>Til venjingina verður eitt Proton Development Board og forritið Proton Suite útflýggjað til hvønn lesandi, umframt USB kaðal, Serial til USB umskiftari og Streymforsýning 12VDC. Ein telda við Windows skal eisini brúkast til hvønn lesandi. <em type="bold">Proton Development Board </em>Hetta er eitt borð, ið hevur ymiskar elektroniskar komponentar festar á borðið. Kjarnan á borðinum er ein PIC16F877 microcontrollari. <em type="bold">Proton Suite </em>Proton Suite er eitt kompilara forrit. Tað vil siga, at forritið, ið skal brúkast til PIC microcontrollaran, verður forritað í Proton Suite á einum máli, ið menniskju skilja. Síðan verður forritið umgjørt til ein hexadecimalan fíl, ið PIC controllarin skilir. Málið, ið brúkt verður í Proton Suite kallast PicBasic, og líkist sera nógv BASIC málinum, ið er kent frá eldri teldum. PicBasic er helst tað teldumálið, ið mest líkist enskum talumáli samanborðið við onnur teldumál. Hetta ger, at PicBasic er sera nemt og skjótt at læra. <em type="bold">3. Uppgávan </em></p>
<p>Uppgávan er býtt í fýra partar, har tríggir teir fyrstu snúgva seg um at royna 3 ymisk forrit, ið verða handað (sí Appendices A, B og C), og ymsar broytingar verða gjørdar í. Síðan verður eitt forrit gjørt av teimum trimum soleiðis, at tey koma at virka saman. <em type="bold">3.1 Roynd við grafiskum LCD (GLCD) </em></p>
<p>Eitt forrit skal gerast í Proton Suite, og síðan leggjast niður í PIC16F877 microcontrollaran á Proton Development borðinum. Displayið er grafiskt, so møguligt er at vísa grafik ella rørðslumyndir. Hvør lesandi ger sítt egna grafiska eyðkenni til displayið. Sí Appendix A fyri at síggja eitt dømi. <em type="bold">3.2 Vís knappaborð á GLCD </em></p>
<p>Forritið skal aktivera knappaborðið á Proton borðinum soleiðis, at tølini 1-16 verða representerað við knappaborðinum. Somuleiðis skal forritið kunna vísa á displayinum, ið situr á Proton borðinum, hvat tal verður trýst á. Sí Appendix B fyri at síggja eitt dømi. <em type="bold">3.3 Analog til Digital Convertering (ADC) </em></p>
<p>Á Proton borðinum er eitt potentiometur og í PIC controllaranum er ein analog til digital umskiftari. Eitt forrit skal gerast, sum vísir virðið á spenninginum, tá skrúa verður uppá potentiometrið. Sí Appendix C fyri at síggja eitt dømi. <em type="bold">3.4 Samanseting av øllum </em></p>
<p>Ger eitt forrit, sum fyrst vísir grafiska eyðkennið. Eftir tað skal displayið vísa á, hvat trýst verður á knappaborðinum, men tá trýst verður á ”1”, verður virðið á spenninginum víst. <em type="bold"></em><em type="bold">4. </em></p>
<p><em type="bold">Mannagongd Vegleiðing til uppsetan av Proton borði saman við teldu </em><em type="bold">4.1 </em></p>
<p>Byrja við at innstallera Proton+ Suite á telduna <em type="bold">4.2 </em></p>
<p>Innstallera appelsingula dongle (USB stikkið), ið er hjálagt. Minst til at innstallera frá fløgu, áðrenn dongle verður sett í. Eitt lítið skjal er hjálagt, sum greiður frá, hvussu innstallerað verður. <em type="bold">4.3 </em></p>
<p xml:lang="eng">Innstallera USB to Serial Link. <em type="bold">4.4 </em></p>
<p>Byrja Proton IDE, sum tú finnur í Start. Um tú brúkar Vista, skal tú brúka: Run as Administrator (Proton IDE) <em type="bold">4.5 </em></p>
<p>Set GLCD í Proton borðið (Frá uttasta holinum til vinstru). Set USB to Serial kaðal millum teldu og Proton borð. <em type="bold">4.6 </em></p>
<p xml:lang="dan">Set streymforsýning (12VDC) til Proton borðið. <em type="bold">4.7 </em></p>
<p type="listitem">Royndarkoyring av forriti: GLCD_Test.bas (C:\Program  Files\ProtonIDE\Samples)</p>
<p type="listitem">Lat GLCD_Test.bas upp í Proton IDE</p>
<p type="listitem">Trýst á Compile and Program knappin.</p>
<p type="listitem">Síðan verður biðið um at endurstarta Proton borðið. (Knappurin í miðuni á borðinum)</p>
<p type="listitem">Um einki hendur. Er neyðugt at kanna, um COM portrið er rætt uppsett.</p>
<p type="listitem">Trýst á Loader Read</p>
<p type="listitem">Her sæst ein lítil menu við <span type="quote" xml:lang="eng">“COM 3”</span> ella okkurt líknandi. Minst til, hvat</p>
<p type="listitem">COM stendur í menuini.</p>
<p type="listitem" xml:lang="eng">Fær síðan inn á Control Panel &gt; System &gt; Device Manager &gt; Ports (COM &amp; LPT)</p>
<p type="listitem">Her skal I756X hava sama virði í COM portri, sum var uppgivið í Loader</p>
<p type="listitem">Read. Um ikki so høgra klikka á I756X, og vel Properties. Vel Port  settings &gt; Advanced. Set síðan COM Port number til sama nummar, sum  fyrr sæð í Loader Read.</p>
<p type="listitem">Fær síðan aftur í Proton IDE og trýst á Compile and Program knappin.</p>
<p type="listitem">Síðan verður biðið um at endurstarta Proton borðið. (Knappurin í miðuni á  borðinum)</p>
<p type="listitem">Forritið skuldi nú verið downloadað og virkið í microcontrollaranum.</p>
<p type="listitem">Hetta sæst, um okkurt skilagott verður víst á GLCD´inum. 4.8</p>
<p>So skuldi verið klárt at fara í gongd við uppgávurnar.</p>
<p xml:lang="eng"><em type="bold">Appendix A </em></p>
<p>PicBasic forrit til GLCD Display <em type="italic">GLCD_Roynd.bas </em><em type="italic">' Vís tekst og grafikk á einum grafiskum LCD (64x64) </em></p>
<p><em type="italic"></em><em type="bold">Include </em><span type="quote" xml:lang="eng">"PROTON_G4.INT"</span> <em type="italic">' Inkluderar uppsetan til PIC </em><em type="italic">' Dimensionera nakrar variablar </em></p>
<p xml:lang="eng"><em type="italic"></em><em type="bold">Dim </em>Xpos </p>
<p><em type="bold">As Byte </em><em type="italic">' Setur Xpos sum eitt byte </em></p>
<p xml:lang="eng"><em type="italic"></em><em type="bold">Dim </em>Ypos </p>
<p><em type="bold">As Byte </em><em type="italic">' Setur Xpos sum eitt byte </em></p>
<p><em type="italic"></em><em type="bold">Cls </em><em type="italic">' Ruddar LCD skermin </em></p>
<p><em type="italic"></em><em type="bold">Print At </em>0 , 2 , <span type="quote">"Setursroynd 2009"</span> <em type="italic">' Skrivar á linju 0,2 </em></p>
<p><em type="italic"></em><em type="bold">DelayMS </em>3000 <em type="italic">' Bíðar í 3 sekund </em></p>
<p><em type="italic"></em><em type="bold">For </em>Xpos = 0 <em type="bold">To </em>10 <em type="italic">' Ein for lykkja ið telur frá 0 til 10 </em><em type="bold">Print At </em>0 , 2 + Xpos, " " <em type="italic">' Skrivar á pláss 2 til 12 </em></p>
<p><em type="italic"></em><em type="bold">DelayMS </em>100 <em type="italic">' Bíðar í 100 ms </em><em type="bold">Next </em><em type="italic">' Tekur næsta tal </em></p>
<p><em type="italic"></em><em type="bold">Print At </em>7 , 2 , <span type="quote">"Eitt fellandi punkt"</span> <em type="italic">' Skrivar á linju 7,2 </em></p>
<p>Umaftur: <em type="italic">' Setur eitt merkið (Label) </em></p>
<p><em type="italic"></em><em type="bold">For </em>Xpos = 0 <em type="bold">To </em>63 <em type="italic">' Telur frá 0 til 63 </em>Ypos = <em type="bold">Sin </em>Xpos <em type="italic">' Roknar sinus av Xpos </em></p>
<p><em type="bold">Plot </em>Xpos , Ypos <em type="italic">' Teknar á (Xpos,Ypos) á GLCD </em></p>
<p><em type="bold">DelayMS </em>10 <em type="italic">' Bíðar í 10 ms </em></p>
<p><em type="italic"></em><em type="bold">Next </em><em type="italic">' Tekur næsta tal </em></p>
<p><em type="italic"></em><em type="bold">For </em>Xpos = 0 <em type="bold">To </em>63 <em type="italic">' Telur frá 0 til 63 </em>Ypos = <em type="bold">Sin </em>Xpos <em type="italic">' Roknar sinus av Xpos </em></p>
<p><em type="bold">UnPlot </em>Xpos , Ypos <em type="italic">' Ruddar á (Xpos,Ypos) á GLCD </em></p>
<p xml:lang="eng"><em type="bold">DelayMS </em>10 <em type="italic">' Bíðar i 10 ms </em></p>
<p><em type="italic"></em><em type="bold">Next </em><em type="italic">' Tekur næsta tal </em></p>
<p><em type="italic"></em><em type="bold">GoTo </em>Umaftur <em type="italic">' Far til merkið: Umaftur </em></p>
<p xml:lang="dan"><em type="italic"></em><em type="bold">Include </em><span type="quote" xml:lang="eng">"FONT.INC"</span> <em type="italic">' Inkluderar font fíl til GLCD </em></p>
<p xml:lang="eng"><em type="bold">Appendix B </em></p>
<p>PicBasic forrit til knappaborð <em type="italic">Knappabord.bas </em><em type="italic">' Forrit til at vísa knappaborð á GLCD </em></p>
<p><em type="bold">Include </em><span type="quote" xml:lang="eng">"PROTON_G4.INT"</span> <em type="italic">' Inkluderar uppsetan til PIC ' Dimensionera nakrar variablar </em></p>
<p xml:lang="eng"><em type="bold">Dim </em>Sula <em type="bold">As Byte </em><em type="italic">' Knappaborð súla </em></p>
<p xml:lang="eng"><em type="bold">Dim </em>Rekkja <em type="bold">As Byte </em><em type="italic">' Knappaborð rekkja </em></p>
<p><em type="bold">Dim </em>Knappur <em type="bold">As Byte </em><em type="italic">' Knapp virði </em></p>
<p>OPTION_REG.7 = 0 <em type="italic">' Loyvir PORTB <span type="quote" xml:lang="eng">"pullups"</span> </em></p>
<p><em type="italic"></em><em type="bold">Cls </em><em type="italic">' Ruddar GLCD </em><em type="bold">DelayMS </em>100 <em type="italic">' Bíðar í 100 ms </em></p>
<p><em type="italic"></em><em type="bold">Print At </em>0 , 2 , <span type="quote">"Setursroynd 2009"</span> <em type="italic">' Skrivar á linju 0,2 </em></p>
<p><em type="italic"></em><em type="bold">Print At </em>2 , 2 , "Tal:" <em type="italic">' Skrivar á linju 2,2 </em></p>
<p>Lykkja: <em type="bold">GoSub </em>HeintaKnapp <em type="italic">' Heinta ein knapp frá knappaborði </em></p>
<p><em type="italic"></em><em type="bold">Print At </em>2, 6, #Knappur , " " <em type="italic">' Vís ASCII knappanummar </em></p>
<p><em type="italic"></em><em type="bold">GoTo </em>Lykkja <em type="italic">' Far til merkið: Lykkja </em><em type="italic">' Subrutina til at heinta ein knapp frá knappaborði </em>HeintaKnapp: </p>
<p><em type="bold">DelayMS </em>50 <em type="italic">' Slepp knappi, bíða </em></p>
<p><em type="italic"></em>HeintaKnappUppi: <em type="italic">' Bíða til allir knappar eru uppi </em></p>
<p><em type="italic"></em>PORTB = 0 <em type="italic">' Setur allar útgangir til lágt </em></p>
<p><em type="italic"></em>TRISB = %11110000 <em type="italic">' Setur niðastu 4 bein til útgangir, ovastu 4 bein til inngangir </em></p>
<p><em type="italic"></em><em type="bold">If </em>(PORTB &gt;&gt; 4) &lt;&gt; %00001111 <em type="bold">Then </em>HeintaKnappUppi <em type="italic">' Um nakar knappur er niðri, far aftur </em></p>
<p><em type="italic"></em><em type="bold">DelayMS </em>50 <em type="italic">' Slepp knappi, bíða </em></p>
<p>HeintaTrystanKnapp: <em type="italic">' Bíða til knappur verður trýstur </em></p>
<p><em type="italic"></em><em type="bold">For </em>Sula = 0 <em type="bold">To </em>3 <em type="italic">' 4 súlur á knappaborði </em></p>
<p><em type="italic"></em>PORTB = 0 <em type="italic">' Setur allar útgangir til lágt </em></p>
<p><em type="italic"></em>TRISB = ( <em type="bold">DCD </em>Sula) ^ %11111111 <em type="italic">' Setur ein súlu bein to útgang </em></p>
<p><em type="italic"></em>Rekkja = PORTB &gt;&gt; 4 <em type="italic">' Les rekkju </em></p>
<p xml:lang="eng"><em type="italic"></em><em type="bold">If </em>Rekkja &lt;&gt; %00001111 <em type="bold">Then </em>KnappurHeintadur <em type="italic">' Um knappur trýsur, far út </em></p>
<p><em type="italic"></em><em type="bold">Next </em><em type="italic">' Far víðari </em><em type="bold">GoTo </em>HeintaTrystanKnapp <em type="italic">' Eingin knappur trýstur, kanna aftur </em>KnappurHeintadur: <em type="italic">' Broyt rekkju og súlu til knappanummar 1 - 16 </em></p>
<p><em type="italic"></em>Knappur = (Sula * 4) + ( <em type="bold">NCD </em>(Rekkja ^ %00001111)) <em type="bold">Return </em><em type="italic">' Subrutina liðug </em></p>
<p>Label: <em type="italic">' Setur eitt merkið (Label) </em></p>
<p xml:lang="eng"><em type="italic"></em><em type="bold">End </em><em type="italic">' Liðugt </em></p>
<p xml:lang="dan"><em type="italic"></em><em type="bold">Include </em><span type="quote" xml:lang="eng">"FONT.INC"</span> <em type="italic">' Inkluderar font fíl til GLCD </em></p>
<p xml:lang="eng"><em type="bold">Appendix C </em></p>
<p>PicBasic forrit til Analog til Digital Convertering <em type="italic">ADC.bas </em><em type="italic">' Forrit til at vísa Analog til Digital á GLCD </em></p>
<p><em type="italic"></em><em type="bold">Include </em><span type="quote" xml:lang="eng">"PROTON_G4.INT"</span> <em type="italic">' Inkluderar uppsetan til PIC </em></p>
<p><em type="italic"></em><em type="bold">ADIN_RES </em>= 10 <em type="italic">' 10-bit upploysningur verður settur </em><em type="bold">ADIN_TAD </em>= FRC <em type="italic">' RC OSC valdur </em><em type="bold">ADIN_STIME </em>= 50 <em type="italic">' Loyv 50us samplingstíð </em></p>
<p><em type="italic"></em><em type="bold">Dim </em>ADvirdi <em type="bold">As Word </em><em type="italic">' Dimensionera variabul </em>TRISA = %11111111 <em type="italic">' Set øll bein á PORTA til inngangir </em>ADCON1 = %10000010 <em type="italic">' Set PORTA til analog </em></p>
<p><em type="italic"></em><em type="bold">DelayMS </em>500 <em type="italic">' Bíða í 500 ms </em></p>
<p><em type="italic"></em><em type="bold">Cls </em><em type="italic">' Rudda GLCD </em>Umaftur: </p>
<p>ADvirdi = <em type="bold">ADIn </em>0 <em type="italic">' Les kanal 0 (Potentiometur) (0-1023) </em>ADvirdi = (ADvirdi */ 500) &gt;&gt; 2 </p>
<p xml:lang="eng"><em type="bold">Print At </em>0, 1, "Spenningur:" <em type="bold">Print At </em>1, 1, <em type="bold">Dec </em>(ADvirdi/100),".", <em type="bold">DEC2 </em>ADvirdi," VDC" </p>
<p><em type="bold">DelayMS </em>100 <em type="italic">' Bíða í 500 ms </em><em type="bold">GoTo </em>Umaftur <em type="italic">' Far til merkið: Umaftur </em></p>
<p xml:lang="dan"><em type="italic"></em><em type="bold">Include </em><span type="quote" xml:lang="eng">"FONT.INC"</span> <em type="italic">' Inkluderar font fíl til GLCD </em></p>
</body></document>
